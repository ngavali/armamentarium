<h3><a href="#linux" onclick="_().loadContent(this,'linux','ContentBody');" >Containers</a> - Introduction</h3></p>
<r>Draft!!!</r>
In this article, we will familarize ourself with namespaces fundamentals and bare minimal <i>essentials</i>.  The purpose of this article is to setup a base to get you started with container technology and at the minimal make reader aware of what exactly is a container. We will take a deep dive into exploiting namespaces to build our own container in the <a href="/#linux/container_write" target="_">second</a> part of this article. Without further ado, let us start with understanding what are Namespaces, building block of Container technology.</p>
Namespaces<sup><a href="https://man7.org/linux/man-pages/man7/namespaces.7.html" target="_">man pages</a></sup> is a Linux kernel feature that allow processe(s) to have their own isolated set of the global system resources ( such as pid, ipc, network, hostname, mounts etc. ).

Kinds of namespaces available in linux.</p>
<ul>
<li>UTS [CLONE_NEWUTS]</br>Process can have different hostname.</li>
<li>IPC [CLONE_NEWIPC]</li>
<li>Mount [CLONE_NEWNS]</li>
<li>PID [CLONE_NEWPID]</li>
<li>Network [CLONE_NEWNET]</br>Network interface isolation.</li>
<li>User [CLONE_NEWUSER]</br>Mapping external users into namespaces to provide elevated privileges. Ex. a normal can be mapped as root inside the new namespace.</li>
<li>Cgroup [CLONE_NEWCGROUP]</li>
<li>Time [CLONE_NEWTIME, added recently]</br>Allows to have different system time.</li>
</ul>
Switching to a new Namespace is accompllished using either of the two systems calls.
<ul>
<li>unshare - puts existing process into a new Namespace</li>
<li><a href="https://man7.org/linux/man-pages/man2/clone.2.html" target="_">clone</a> - creates a child process in a new Namespace.</li>
</ul>
<h4>User</h4>
User mapping are accomplished by writing to following 3 files:</br>
<ul>
<li>/proc/self/uid_map</li>
<li>/proc/self/gid_map</li>
<li>/proc/self/setgroups	(setgroups has to be disabled)</li>
</ul>
<h4>Mount</h4>
From CLONE man pages.
<pre>
<b>CLONE_NEWNS</b> (since Linux 2.4.19)
              If CLONE_NEWNS is set, the cloned child is started in a new
              mount namespace, initialized with a copy of the namespace of
              the parent.  If CLONE_NEWNS is not set, the child lives in the
              same mount namespace as the parent.
</pre>
<h4>Networking</h4>
&Tab;Networking is accomplished by creating a virtual interface pair. Wherein, one end attached to new namespace and another remains attached to the default namespace. Traffic is moved in and out via virtual interface pairs. i.e., packets send to one originate out of the another interface.
<center>
<image src="/images/vlinks.svg" width="330px">
Create eth pair and bridge</p>
</center>
<pre>
##Setup bridge interface
ip link add name vbridge type bridge
##Create virtual link pair. Move one of them in the Namespace identified by pid
ip link add veth0 type veth peer name veth1 netns <pid>
</pre>
<center>
<image src="/images/veth_pair.svg" width="330px">
Link veth0 with the bridge</p>
</center>
<pre>
##Assign address to the bridge link
ip addr add 192.168.1.10/24 brd + dev vbridge
##Make bridge as master for veth0
ip link set veth0 master vbridge
</pre>
<center>
<image src="/images/veth_pair_ns.svg" width="330px">
Move veth1 to NS, using the pid belongs to NS</p>
</center>
<pre>
##Assign address to the peer link inside the container running in Namespace
ip addr add 192.168.1.12/24 dev veth1
##Bring up the links
ip link set vbridge up
ip link set veth0 up
##This is from inside the container running in Namespace
ip link set veth1 up
</pre>
