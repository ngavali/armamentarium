<h3><a href="#linux"  >Containers</a> - Introduction</h3>
&emsp; Hello Friends, hope you all are doing great. In this article we will take a sneak peek into Containers. What makes them and how they are built. (Most of you must be knowning it as a Docker container, but that is a wrapper using the Linux Kernel Features underneath).
Considering the vastness of the topic, I have divided it into two parts. First part (this article) focuses on the bare minimal <i>essential</i> concepts, which will serve as an introduction to the building blocks of a Container. And in the <a href="#linux/container_write" >second</a> part, we will take a deep dive by building our own container. However, there will be no active commentary from myside and I would want you to look at the code (talk to it), read through it and understand what is going on by getting your hands dirty. First one will be a shallow dive with a Golang code, then a much deeper dive with a Rust code to grasp the underlying mechanism. In that way I feel you will learn the most and not like reading just another article. Jump into the pool and learning how to swim by yourself. Links to the relevant topics are added whever required (like Linux man pages) for readers, who wish to dig deeper.</p>
&emsp; Now, without any further ado let us begin with looking at Namespaces. Heart of the containers.</br>
Namespaces<sup>[<a href="https://man7.org/linux/man-pages/man7/namespaces.7.html" target="_">man pages</a>]</sup> is a Linux kernel feature that allow processe(s) to have their own isolated set of the global system resources ( well you know them as pid, ipc, network, hostname, mounts etc. ). When a Linux system starts, all the processes belong to a default Namespace and have access to the global resources.
</p>
<h4>Entering into a Namespace</h4>
&emsp; Switching to a new Namespace is accomplished by invoking either of the following two Linux System calls with appropriate flags/inputs. These flags dictate the desired isolation of resources.
<ul>
<li>unshare<sup>[<a href="https://www.man7.org/linux/man-pages/man2/unshare.2.html">man pages</a>]</sup> - puts existing process into a new Namespace</li>
<li>clone<sup>[<a href="https://man7.org/linux/man-pages/man2/clone.2.html" target="_">man pages</a>]</sup> - creates a child process in a new Namespace.</li>
</ul>
<h4>Kinds of namespaces available in linux.</h4>
<ul>
<li>UTS</br>Allows process to have a different hostname.</li>
<li>IPC</br>Group of processes can have their own isolated IPC resources.</li>
<li>Mount</br>Group of processes can have their own isolated mount bindings.</li>
<li>PID</br>Processes can have their own set of Process IDs.</li>
<li>Network</br>Process have their onw isolated network resources.</li>
<li>User</br>Mapping external user into namespaces to provide elevated privileges. Ex. Mapping a normal user to a privileged root user inside the container.</li>
<li>Cgroup</br><i>We will cover this in a separate article.</i></li>
<li>Time (added recently)</br>Allows to have different system time.</li>
</ul>
<h4>Enabling specific Namespaces</h4>
<h4>User</h4>
User mapping are accomplished by writing to following 3 files:</br>
<ul>
<li>/proc/self/uid_map</li>
<li>/proc/self/gid_map</li>
<li>/proc/self/setgroups	(setgroups has to be disabled, <i>More on this later</i>)</li>
</ul>
<h4>Mount</h4>
From CLONE man pages.
<pre>
<b>CLONE_NEWNS</b> (since Linux 2.4.19)
              If CLONE_NEWNS is set, the cloned child is started in a new
              mount namespace, initialized with a copy of the namespace of
              the parent.  If CLONE_NEWNS is not set, the child lives in the
              same mount namespace as the parent.
</pre>
Any mount(s) or binding(s) created inside will not be visiable in the other namespaces.
<h4>Networking</h4>
&Tab;Networking is accomplished by creating a virtual interface pair. Wherein, one is attached to a new namespace while the other remains attached to the default namespace. Traffic is moved in and out via virtual interface pairs. i.e., packets send to one, originate out of the other interface.</br>
Please follow below depiction to quickly understand how it is done.</p>
<center>
<image src="/images/vlinks.svg" width="330px">
Create eth pair and bridge</p>
</center>
<pre>
##Setup bridge interface
ip link add name vbridge type bridge
##Create virtual link pair. Move one of them in the Namespace identified by pid
ip link add veth0 type veth peer name veth1 netns <pid>
</pre>
<center>
<image src="/images/veth_pair.svg" width="330px">
Link veth0 with the bridge</p>
</center>
<pre>
##Assign address to the bridge link
ip addr add 192.168.1.10/24 brd + dev vbridge
##Make bridge as master for veth0
ip link set veth0 master vbridge
</pre>
<center>
<image src="/images/veth_pair_ns.svg" width="330px">
Move veth1 to NS, using the pid belongs to NS</p>
</center>
<pre>
##Assign address to the peer link inside the container running in Namespace
ip addr add 192.168.1.12/24 dev veth1
##Bring up the links
ip link set vbridge up
ip link set veth0 up
##This is from inside the container running in Namespace
ip link set veth1 up
</pre>
That's the theory to get you started. In the  <a href="#linux/container_write" >next article</a> have it all explored by yourself!!! 
</p>
Thank you.
