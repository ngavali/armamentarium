<h3><a href="#linux"  >Containers</a> - Let's build one</h3></p>
In case you want to have a look at basics of Namespaces, click <a href="#linux/container_intro" >introduction</a>.</p>
As I mentioned in the earlier article, I will have readers go and take a dive of the code and explore things for themselves. Below execution flow will provide you a bird's eye view of the complete process.</p>
<center>
<image src="/images/container_flow.svg" width="600px">
Fig(a). execution flow.</p>
</center>
Things to prepare before you start.</br>
Have a linux filesystem structure created under /containerfs directory (accessible via user executing final program). This will have all the essential utilities such as bash and others , you can add to it per your need (do not forget to add dependent libraries, ldd is your friend). Simply copy them from the local system into this directory (Yeah, do not make symlinks).</p>
<pre>
/containerfs/
├── bin		#some utilities
│   ├── bash	#required
│   ├── hostname
│   ├── ls
│   ├── ping
│   ├── ps
├── etc
├── file
├── lib
│   └── x86_64-linux-gnu
│       ├── libacl.so.1
│       ├── libattr.so.1
│       ├── libblkid.so.1
│       ├── libcap.so.2
│       ├── libc.so.6
│       ├── libdl.so.2
│       ├── libmount.so.1
│       ├── libnsl.so.1
│       ├── libpcre.so.3
│       ├── libprocps.so.3
│       ├── libselinux.so.1
│       ├── libtinfo.so.5
│       └── libuuid.so.1
├── lib64
│   └── ld-linux-x86-64.so.2
├── mp
├── proc
├── sbin
│   ├── ifconfig
│   └── ip
└── usr
    └── bin
        └── id
</pre>
<h3>A Shallow Dive</h3> Using Go (Short version)</br>
Program is named after the hindu god of creation, Brahma.
<pre>
package main

import (
        "fmt"
        "os"
        "os/exec"
        "syscall"
)

func main() {
        switch os.Args[1] {
        case "run":
                run()
        case "container":
                container()
        default:
                fmt.Println("Usage: ./brahma run command")
        }
}

func run() {
        fmt.Printf("Creating Container for %v\n", os.Args[2:])
        cmd := exec.Command("/proc/self/exe", append([]string{"container"}, os.Args[2:]...)...)
        cmd.Stdin = os.Stdin
        cmd.Stdout = os.Stdout
        cmd.Stderr = os.Stderr
        cmd.SysProcAttr = &syscall.SysProcAttr{
                Cloneflags: syscall.CLONE_NEWNS |
                        syscall.CLONE_NEWUTS |
                        syscall.CLONE_NEWIPC |
                        syscall.CLONE_NEWPID |
                        syscall.CLONE_NEWNET |
                        syscall.CLONE_NEWUSER,
                //Map UID
                UidMappings: []syscall.SysProcIDMap{
                        {
                                HostID:      os.Getuid(), //UID of current program to be mapped with
                                ContainerID: 0,           //UID in container
                                Size:        1,
                        },
                },
                //Map GID
                GidMappings: []syscall.SysProcIDMap{
                        {
                                HostID:      os.Getgid(), //GID of current program to be mapped with
                                ContainerID: 0,           //GID in container
                                Size:        1,
                        },
                },
        }
        _err := cmd.Start()
        if _err != nil {
                fmt.Println("Error while creating Container ->", _err)
        } else {
                fmt.Println("Container created successfully!!!")
        }
        if _err := cmd.Wait(); _err != nil {
                fmt.Println("Error while in Container ->", _err)
        }
        fmt.Println("Container distroyed!!!")
}

func container() {
        fmt.Printf("Preparing %v in new Container\n", os.Args[2:])
        syscall.Sethostname([]byte("my-container"))
        syscall.Chroot("/containerfs")               //New root for the Container
        syscall.Chdir("/")                           //Change directory
        syscall.Mount("proc", "proc", "proc", 0, "") //Mount new proc
        //Replace the current process. Leaving no trace of the parent /proc/self/exe
        _err := syscall.Exec(os.Args[2], os.Args[3:], nil)
        if _err != nil {
                fmt.Println("Container error ->", _err)
        }
        fmt.Println("I am dying!!!")
}
</pre>
<h3>Deep dive</h3>
Using Rust (Long version)</br>
Here you will exactly see, what is happening under the hood.
<pre>
extern crate libc;
use libc::{
    CLONE_NEWIPC, CLONE_NEWNET, CLONE_NEWNS, CLONE_NEWPID, CLONE_NEWUSER, CLONE_NEWUTS, SIGCHLD,
};
use rustc_serialize::json;
use std::ffi::CString;
use std::fs::File;
use std::fs::OpenOptions;
use std::io::prelude::*;
use std::io::Error;

#[derive(RustcDecodable, RustcEncodable, Debug, Clone)]
struct Cmd {
    executable: String,
    args: Vec<String>,
}

#[derive(RustcDecodable, RustcEncodable, Debug, Clone)]
struct MountBinds {
    source: String,
    target: String,
    read_only: Option<bool>,
}

#[derive(RustcDecodable, RustcEncodable, Debug, Clone)]
struct UserMap {
    uid: u16,
    gid: u16,
}

#[derive(RustcDecodable, RustcEncodable, Debug, Clone)]
struct NsConfig {
    hostname: Option<String>,
    program: Cmd,
    user_map: Option<UserMap>,
    mount_bindings: Option<Vec<MountBinds>>,
    chroot: String,
}

impl NsConfig {
    fn from_file(config_file_name: String) -> NsConfig {
        let error_message = format!("Config file not found: {}", config_file_name);
        let mut file = File::open(config_file_name).expect(error_message.as_str());
        let mut server_config = String::new();
        file.read_to_string(&mut server_config).unwrap();
        let ns_config: NsConfig = json::decode(&mut server_config).unwrap();
        ns_config
    }

    fn program(&self) -> Cmd {
        self.program.clone()
    }

    fn bind_map(&self) -> Option<Vec<MountBinds>> {
        self.mount_bindings.clone()
    }

    fn user_map(&self) -> Option<UserMap> {
        self.user_map.clone()
    }

    fn chroot(&self) -> String {
        self.chroot.clone()
    }

    fn hostname(&self) -> Option<String> {
        self.hostname.clone()
    }
}

fn create_namespace_mapping(UserMap { uid, gid }: UserMap) {
    let pid = "self";
    let setgroups_file = format!("/proc/{}/setgroups", pid);
    let uid_map_file = format!("/proc/{}/uid_map", pid);
    let gid_map_file = format!("/proc/{}/gid_map", pid);
    let mut setgroups = OpenOptions::new()
        .write(true)
        .read(true)
        .open(&setgroups_file)
        .unwrap();
    setgroups
        .write_all(b"deny")
        .expect("Unable to write to setgroups");
    setgroups.flush().unwrap();
    drop(setgroups);
    let mut uid_map = OpenOptions::new()
        .read(true)
        .write(true)
        .open(uid_map_file)
        .unwrap();
    let uid_map_content = format!("0 {} 1", uid);
    uid_map
        .write_all(uid_map_content.as_bytes())
        .expect("Unable to write UID map");
    uid_map.flush().unwrap();
    drop(uid_map);
    let mut gid_map = OpenOptions::new()
        .read(true)
        .write(true)
        .open(gid_map_file)
        .unwrap();
    let gid_map_content = format!("0 {} 1", gid);
    gid_map
        .write_all(gid_map_content.as_bytes())
        .expect("Unable to write GID map");
    gid_map.flush().unwrap();
    drop(gid_map);
}

fn setup_mount_binds(mount_bind_maps: Vec<MountBinds>) {
    unsafe {
        //Bind mounts before chroot
        for bm in mount_bind_maps {
            let res = libc::mount(
                CString::new(bm.source.as_bytes()).unwrap().as_ptr(),
                CString::new(bm.target.as_bytes()).unwrap().as_ptr(),
                std::ptr::null(),
                libc::MS_BIND, //Note readonly flag wont work here - handle RO binds later
                std::ptr::null(),
            );
            if res != 0 {
                println!(
                    "bind mount failed with an error -> {:?}",
                    Error::last_os_error()
                );
            } else {
                //Handle RO binds
                if let Some(true) = bm.read_only {
                    let res = libc::mount(
                        std::ptr::null(),
                        CString::new(bm.target.as_bytes()).unwrap().as_ptr(),
                        std::ptr::null(),
                        libc::MS_RDONLY | libc::MS_BIND | libc::MS_REMOUNT,
                        std::ptr::null(),
                    );
                    if res != 0 {
                        println!(
                            "bind readonly switch failed with an error -> {:?}",
                            Error::last_os_error()
                        );
                    }
                }
            }
        }
    }
}

fn setup_chroot_env(chroot_path: String) {
    unsafe {
        let res = libc::chroot(CString::new(chroot_path.as_bytes()).unwrap().as_ptr());
        if res != 0 {
            println!(
                "chroot failed with an error -> {:?}",
                Error::last_os_error()
            );
        }
        let res = libc::chdir(CString::new("/").unwrap().as_ptr());
        if res != 0 {
            println!("chdir failed with an error -> {:?}", Error::last_os_error());
        }
        //Mount proc filesystem
        let res = libc::mount(
            std::ptr::null(),
            CString::new("/proc").unwrap().as_ptr(),
            CString::new("proc").unwrap().as_ptr(),
            0u64,
            std::ptr::null(),
        );
        if res != 0 {
            println!(
                "proc mount failed with an error -> {:?}",
                Error::last_os_error()
            );
        }
        //Mount dev filesystem
        let res = libc::mount(
            std::ptr::null(),
            CString::new("/dev").unwrap().as_ptr(),
            CString::new("tmpfs").unwrap().as_ptr(),
            0u64,
            std::ptr::null(),
        );
        if res != 0 {
            println!(
                "dev mount failed with an error -> {:?}",
                Error::last_os_error()
            );
        }
        //Mount run filesystem
        let res = libc::mount(
            std::ptr::null(),
            CString::new("/run").unwrap().as_ptr(),
            CString::new("tmpfs").unwrap().as_ptr(),
            0u64,
            std::ptr::null(),
        );
        if res != 0 {
            println!(
                "run mount failed with an error -> {:?}",
                Error::last_os_error()
            );
        }
    }
}

fn exec_in_ns(Cmd { executable, args }: Cmd) -> libc::c_int {
    unsafe {
        //First argument will be the program name itself. See execv syscall description
        let mut args_cstring: Vec<CString> = vec![CString::new(executable.as_bytes()).unwrap()];
        for arg in args {
            args_cstring.push(CString::new(arg.as_bytes()).unwrap());
        }
        let mut args_c_char: Vec<*const libc::c_char> =
            args_cstring.iter().map(|arg| arg.as_ptr()).collect();
        args_c_char.push(std::ptr::null()); //NULL terminated
        let res = libc::execv(
            CString::new(executable.as_bytes()).unwrap().as_ptr(),
            args_c_char.as_ptr(),
        );
        if res != 0 {
            println!(
                "Entry point execution failed with an error -> {:?}",
                Error::last_os_error()
            );
        }
        res
    }
}

extern "C" fn setup_ns(ns_config: *mut NsConfig) -> libc::c_int {
    let ns_config: &NsConfig = unsafe { &mut *ns_config };
    //Set hostname
    unsafe {
        if let Some(hostname) = ns_config.hostname() {
            let res = libc::sethostname(
                CString::new(hostname.as_bytes()).unwrap().as_ptr(),
                hostname.as_bytes().len(),
            );
            if res != 0 {
                println!(
                    "proc mount failed with an error -> {:?}",
                    Error::last_os_error()
                );
            }
        }
        //Do mappings UID and GID mappings
        println!("setting up uid and gid mappings");
        match ns_config.user_map() {
            Some(user_map) => create_namespace_mapping(user_map),
            None => {}
        }

        //Mount bindings
        println!("setting up binds");
        match ns_config.bind_map() {
            Some(bind_map) => setup_mount_binds(bind_map),
            None => {}
        }

        //Chroot and Proc Mount
        println!("setting up chroot");
        setup_chroot_env(ns_config.chroot());

        //EXECV the program replacing the clone completely
        println!("setting up to execute program");
        exec_in_ns(ns_config.program())
    }
}

fn main() {
    //CLONE and then EXEC entry point in CLONE
    unsafe {
        let mut ns_config = NsConfig::from_file("container.json".to_string());
        let mut nstack = [0u8; 4096];
        let ptr = nstack.as_mut_ptr().offset(nstack.len() as isize);
        let ptr_aligned = ptr.offset((ptr as usize % 16) as isize * -1);
        //CLONE FLAGS for namespace
        let mut ns_flags: libc::c_int =
            CLONE_NEWNS | CLONE_NEWUTS | CLONE_NEWIPC | CLONE_NEWPID | CLONE_NEWNET | SIGCHLD;
        //NEWUSER if user mappings are present
        match ns_config.user_map {
            Some(_) => ns_flags = ns_flags | CLONE_NEWUSER,
            None => {}
        }
        let pid = libc::clone(
            std::mem::transmute(setup_ns as extern "C" fn(*mut NsConfig) -> libc::c_int),
            ptr_aligned as *mut libc::c_void,
            ns_flags,
            &mut ns_config as *mut _ as *mut libc::c_void,
        );
        //If NEWUSER is not used/user mappings are not provided then you got to be root to perform clone
        if pid != 0 {
            println!("Program PID -> {}", pid);

            let mut rusage: libc::rusage = std::mem::MaybeUninit::uninit().assume_init();
            let mut status: i32 = 0;
            let options: i32 = 0;

            let res = libc::wait4(pid, &mut status, options, &mut rusage);
            println!("CN WAIT RESULT -> {}", res);
            println!("CN RUSAGE -> {:#?}", rusage);
            println!("CN WAIT STATUS -> {}", status);
            if status != 0 {
                println!(
                    "CN WAIT ERROR WHILE RUNNING -> {:?}",
                    Error::last_os_error()
                );
            }
        } // no else
    }
}
</pre>
container.json
<pre>
{
    "chroot": "/containerfs",
    "hostname": "my-container",
    "mount_bindings": [
        {
            "read_only": true,
            "source": "/mounts/readonly/",
            "target": "/containerfs/mp"
        }
    ],
    "program": {
        "args": [
            "-c",
            "/bin/sleep 20s"
        ],
        "executable": "/bin/bash"
    },
    "user_map": {
        "gid": 1000,
        "uid": 1000
    }
}
</pre>
Output
<pre>
$ cargo run
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/container`
Program PID -> 18428
setting up uid and gid mappings
setting up binds
setting up chroot
setting up to execute program
bash-4.3# date
Mon Jan 10 22:01:39 UTC 2020
bash-4.3# hostname
my-container
bash-4.3# exit
exit
CN WAIT RESULT -> 18428
CN RUSAGE -> rusage {
    ru_utime: timeval {
        tv_sec: 0,
        tv_usec: 4000,
    },
    ru_stime: timeval {
        tv_sec: 0,
        tv_usec: 0,
    },
    ru_maxrss: 3272,
    ru_ixrss: 0,
    ru_idrss: 0,
    ru_isrss: 0,
    ru_minflt: 485,
    ru_majflt: 0,
    ru_nswap: 0,
    ru_inblock: 0,
    ru_oublock: 0,
    ru_msgsnd: 0,
    ru_msgrcv: 0,
    ru_nsignals: 0,
    ru_nvcsw: 24,
    ru_nivcsw: 38,
}
CN WAIT STATUS -> 0
</pre>
<a href="https://github.com/ngavali/rationalbear/tree/master/container" target="_">Source code</a>
Thank you.
