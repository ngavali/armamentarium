<h2><a href="#db"  > Database</a> - Mariadb Galera Cluster - Part I - Things to know</h2>
Your application is connected to a single backend mysql/mariadb database node (Master/Slave mode) and you are thinking of scaling it by upgrading to galera based multi-master mariadb database cluster.</p>
<e>Oh Yes! we are</e>. Then this article is for you and will walk you through the things you need to know and deal with when making a move.</p>

<h3>Primary key</h3>
Primary key is MUST for all tables. Only InnoDB engine is supported.

<h3>Autoincrements</h3>
Expect to have gaps in autoincremented values. The gap is equal to the number of nodes in the galera cluster. This ensures IDs are distinct on each node in the cluster, avoiding any conflict inbetween them.
</p>
<h3>Locks</h3>
Transactions compete for the same table row locks as follows.
<ul>
<li>A [S]hared Read lock with other e[X]clusive Write lock</li>
<li>An e[X]clusive Write lock with other e[X]clusive Write lock</li>
</ul>
On a single node, things are pretty straight forward. One gets the lock and rest can wait.
All goes well, when each finishes quickly and if the waiting is long enough you would see below error.
<pre>
ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction
</pre>
Above scenario changes drastically, when you move to galera. You have multiple master nodes ready to accept changes. If such competing transactions happen on different nodes, then what would usually worked well in a single node setup will now give you sudden surprises and headaches.</p>
The most infamous error that you will encounter as soon as you switch to Galera is - 
<pre>
ERROR 1213 (40001): WSREP detected deadlock/conflict and aborted the transaction. Try restarting the transaction
</pre>
<i>Welcome to the brand new world of deadlocks! In Galera, table row locks are not visible across the nodes. It follows an optimistic approach and transactions happening on different nodes can acquire lock on the same table rows.Unaware of each other until either of them commits.</i></p>
Let us examine them
<h4>Surprise #1</h4>
Working on a same table.
<pre>
<b>Transaction #1 [Node #1]</b>
update table A
[X Lock]

<b>Transaction #2 [Node #2]</b>
update table A
[X Lock]
</pre>

You would say, wouldn't an optimistic locking solution in will take care of Surprise #1. But beware, there is still a possiblility you could still end up in conflict i.e., when both transactions have made the update before one of them commits the changes (test it for yourself).
</br>
<e>Ok, but that didn't surprise me. Then wait, how about different tables?</e>
<h4>Surprise #2</h4>
Tables connected by a foriegn key.
<pre>
<b>Transaction #1 [Node #1]</b>
update table A set ... where pk_a = val;
[X Lock]

<b>Transaction #2 [Node #2]</b>
--An INSERT--(has FK reference to table A (pk_a) ) 
insert into table B ( ..., fk_a ) values ( ..., pk_a_val );
[S Lock]

--OR

--An UPDATE--(has FK reference to table A(pk_a) )
update B set fk_a = pk_a_val ...; 
[S Lock]
</pre>
Handle concurrent data access in your application using some sort of pessimistic global locking. You cannot rely on the database table locks.</br>

When talking to different nodes, transactions assume serializable mode.</p>
<e>
You can catch those conflicting transactions in the logs by enabling wsrep_log_conflicts and general_log.</e></p>

<pre>
Ref: https://galeracluster.com/2015/06/debugging-transaction-conflicts-in-galera-cluster/</pre>
</p>

<h3>Large transactions</h3>
Other problem that you got to deal with are large transactions i.e. handling too much of data. Depending on your network conditions, such transactions will put all other changes in the queue and slow down the replicating nodes. It will affect the overall throughput.</p>
<pre>
Ref: https://galeracluster.com/2021/04/galera-streaming-replication-too-big-a-bite-can-choke-your-cluster/
</pre>

<h3>Cross site replication</h3>
You can use gmcast.segment option to group nodes present in the same network. This will optimize the galera protocol traffic. And in some cases IST and SST selection within the segment.
</p>
That's all folks.
</p>
And, now that you have understood the challenges, note that they are not the show stoppers, you can overcome them with a good design. If your prime objective is data consistency, galera provides the same. Additionally, it avoids operational overhead too.</p>
In <a href="#db/galeraSetup" >part II</a > we will see how to setup a Mariadb galera cluster.</p>
