<tr><td>
<h3><a href="#db" onclick="_().loadContent(this,'db','ContentBody');" > Database</a> - Fibonacci</h3>
This example will introduce you to CTE, known as Common Table Expressions. It is a standard SQL feature and recently support was added in mariadb database.</p>
You can think of them as a named result set, which can refer to itself and optionally be excuted recursively.</p>

They are of two kind viz., Non-recursive and Recursive.</p>
Here, we will discuss recursive nature of CTE, it forms a very powerful tool for handing hierarchical or tree-structured data.</p>
To illustrate the same, I will use a very simple example i.e., generating a fibonacci series.
<pre>
set @limit:=100;
WITH <b>RECURSIVE</b> <name>fibonacci</name> ( num, sum ) as <b>(</b>
	select 0 num, 1 sum							<c>--Initialize</c>
	<b>UNION[ALL]</b>								<c>--Collects into a Resultset</c>
	select sum num, (num+sum) sum from <name>fibonacci</name> where sum &lt;= @limit	<c>--Repeat</c>
<b>)</b>
select num as series from <name>fibonacci</name>;						<c>--Final result</c>
</pre>
Query has three sections as follows<p>
1. CTE is given a name say in our case - fibonacci, with it's body included in the parenthesis<p>
<pre>
WITH <b>RECURSIVE</b> <name>fibonacci</name> ( num, sum ) as <b>( <i>...body...</i> )</b>
</pre>
2. Body contains a static part, an expression ( known as Anchor query ) which is computed only once during the life time of a CTE query. You can say that it is an intialization phase, where you prepare a base for upcoming computations.
<pre>
select 0 num, 1 sum
</pre>
Followed by a recursive part, an expression which is excuted repeatatively and consumes it's own output from the previous iteration.</p>
However, to begin with it uses the output from initialization phase as a seed and in subsequent iterations starts consuming it's own output through a self reference (using, CTE name i.e. fibonacci in our case, note that it can be used with other tables/resultset as well) to generate new output.</p>
This continues until rows are generated and stops when a terminating condition is matched, such that new rows could not be generated anymore ( in our case using a where clause with a matching condition ).
<pre>
select sum num, (num+sum) sum from <name>fibonacci</name> where sum &lt;= @limit
</pre>
While this is happening, output from all iterations ( initialize + recursive ) is combined using UNION[ALL - allow duplicate rows] to build up a result set/body.
</p>
3. On termination, the complete resultset is accessed in the last section.
<pre>
select num as series from <name>fibonacci</name>;                                               <c>--Final result</c>
</pre>
Query output
<pre>
+--------+
| series |
+--------+
|      0 |
|      1 |
|      1 |
|      2 |
|      3 |
|      5 |
|      8 |
|     13 |
|     21 |
|     34 |
|     55 |
|     89 |
+--------+
12 rows in set (0.00 sec)
</pre>
Summing it all, I have tried to represent the flow in Fig.1, below.</p>
<center>
	<img src="/images/cte.svg" width="320px" /></br><b>Fig.1</b>
</center>
</p>
Hope this example has helped you understand CTE queries. In the next part, I will talk on representing and storing graph structures in a relational database and we will try to solve the graph structure to find least cost or shortest path between two nodes the SQL way using our understanding of rescursive CTEs.<p>
	</td>
</tr>
</table>
<div>
<center>
</body>
</html>
