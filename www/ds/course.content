<h2><a href="#ds"  >Distributed Systems</a> - MIT 6.824: Distributed Systems</h2>
<meditate/>
<h3>Course Link</h3>
<ul>
<li>Lectures - https://www.youtube.com/watch?v=cQP8WApzIQQ&list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB</li>
<li>Schedule - https://pdos.csail.mit.edu/6.824/schedule.html</li>
</ul>
<h3>Notes</h3>
<h4>Lecture - 1</h4>
MapReduce - Shuffle operation
<h4>Lecture - 3</h4>
<h>Distributed Storage. Why Hard?</h>
<table>
<tr>
<td>Performance </td>
<td>&rarr; Shard Over Many Servers - Faults</td>
</tr>
<tr><td>Faults</td>
<td>&rarr; Tolerance</td></tr>
<tr>
<td>Tolerance</td>
<td>&rarr; Replication</td>
</tr>
<tr>
<td>Replication</td>
<td>&rarr; Inconsitency</td>
</tr>
<tr>
<td>Consistency</td>
<td>&rarr; Performance</td>
</tr>
</table><p/>
<h>Stronge Consistency</h>
A single system, single threaded. Has a poor fault tolerance.<br/>
Let's build a replica (Distributed system) with replicated data.
<h>Bad Replication Design</h>
<h>Split Brain</h>
<h4>Lecture - 4</h4>
<h>Replication</h> 
Failures
<ul>
<li>Fail stop faults</li>
<li>Bugs - Undesired behavior</li>
</ul>
Errors -> Convert to Fail Stop?
<h>Strategies for Replication</h>
State Transfer<br/>
Replicated State Machine - Events
<h4>Lecture - 6</h4>
Fault Tolerance - Raft<br/>
Split Brain Majority: 
Number of replicas = 2F+1 => Can take F failures.
<h>Why do we even need a leader</h> Paxos, consensus algorithm consists of two rounds. With leader it's only one round and everyone agrees with the leader? verify this.
