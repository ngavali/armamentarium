<style>
li {
    list-style-type: disc;
}
</style>
<h2><a href="#rust"  >Rust Programming Language</a> - Epoll</h2></p>
<draft>
Before jumping into the epoll, let us try to build a simple proxy server.
</br>In simple terms, Proxy is something that acts on behalf of something else. 
</br>If a proxy is placed on the client side, it accepts request from a client and connects to a remote server to fetch the response on behalf of the client. It's called a Forward Proxy. It hides a client from the remote server.
</br>And, if a proxy is placed on the server side, it accepts requests from a client on behalf of the backend servers, gets a response from the backend server(s) to a client. It's called a Reverse Proxy. It hides backend server(s) from a client.
</br>
After all, proxy is nothing but something that sits in-between a client and a server. 
</p>
Let us try to implement a Layer 4 Reverse Proxy, it will accept requests from the clients and will send it to the backend servers and the response back to the client connected to it.
</p>

E(vent) poll is an I/O event notification facility in Linux kernel that allows monitoring muliple file descriptors to see if any of them are ready for I/O operation.</p>
It uses epoll instance, a kernel data structure to store 
<ul>
<li>the list of interested file descriptors, that process wants to monitor</br>
I<sub>fd</sub> = { fd<sub>1</sub>, fd<sub>2</sub>, ... ,fd<sub>N</sub> }</li>
<li>the list of ready file descriptors (of interested fds) that ready for I/O operation.</br>
R<sub>fd</sub> &sub; I<sub>fd</sub> (Some fds are ready) or R<sub>fd</sub> &sube; I<sub>fd</sub> (All fds are ready)</li>
</ul>
Linux kernel provides following system calls to create and interact with the epoll instance.
<ul>
<li>epoll_create</br>
Create a new epoll instance and returns its file descriptor.
</li>
<li>epoll_ctl</br>
Interact with the epoll instance, add/remove interested file descriptors.
</li>
<li>epoll_wait</br>
Wait for I/O events to happen, returns the list of ready events. (Blocks the calling thread)
</li>
</ul>
These were the basic building blocks of the epoll. Now, let us see it in action with an example by creating a simple proxy server.

</p>
Single Threaded - With EPOLL + NonBlocking Listener
<pre>
use std::{
    collections::HashMap,
    io::{Read, Write},
    net::TcpStream,
    os::fd::{AsRawFd, FromRawFd},
};

use libc;

trait EndPoint {
    fn get_fd(&self) -> libc::c_int;
    fn write(&mut self, data: &[u8]) -> std::io::Result&lt;usize>;
    fn read(&mut self, data: &mut [u8]) -> std::io::Result&lt;usize>;
}

#[derive(Debug)]
struct Frontend {
    stream: TcpStream,
}

impl Frontend {
    fn new(fd: libc::c_int) -> Self {
        let tcp_stream = unsafe { TcpStream::from_raw_fd(fd) };
        Frontend { stream: tcp_stream }
    }
}

impl Drop for Frontend {
    fn drop(&mut self) {
        println!("Frontend Dropped : {:#?}", self);
    }
}

impl EndPoint for Frontend {
    fn get_fd(&self) -> libc::c_int {
        self.stream.as_raw_fd()
    }

    fn write(&mut self, data: &[u8]) -> std::io::Result&lt;usize> {
        self.stream.write(data)
    }

    fn read(&mut self, data: &mut [u8]) -> std::io::Result&lt;usize> {
        self.stream.read(data)
    }
}

#[derive(Debug)]
struct Backend {
    stream: TcpStream,
}

impl Drop for Backend {
    fn drop(&mut self) {
        println!("Backend Dropped : {:#?}", self);
    }
}

impl Backend {
    fn new(address: &str) -> Self {
        let stream = TcpStream::connect(address).unwrap();
        Backend { stream }
    }
}

impl EndPoint for Backend {
    fn get_fd(&self) -> libc::c_int {
        self.stream.as_raw_fd()
    }

    fn write(&mut self, data: &[u8]) -> std::io::Result&lt;usize> {
        self.stream.write(data)
    }

    fn read(&mut self, data: &mut [u8]) -> std::io::Result&lt;usize> {
        self.stream.read(data)
    }
}

struct TcpProxy {
    port: i32,
    epoll_fd: i32,
    fd_map: HashMap&lt;i32, i32>,
    end_points_map: HashMap&lt;i32, Box&lt;dyn EndPoint>>,
}

use core::fmt::Debug;
impl Debug for TcpProxy {
    fn fmt(&self, f: &mut core::fmt::Formatter&lt;'_>) -> core::fmt::Result {
        write!(
            f,
            "TcpProxy {{
    port: {}
    epoll_fd: {},
    fd_map {:?}
}}",
            self.port, self.epoll_fd, self.fd_map
        )
    }
}

impl TcpProxy {
    fn new(port: i32) -> Self {
        TcpProxy {
            port,
            epoll_fd: unsafe { libc::epoll_create1(0) },
            fd_map: HashMap::new(),
            end_points_map: HashMap::new(),
        }
    }

    fn cleanup_endpoint(&mut self, fd1: libc::c_int, fd2: libc::c_int) {
        self.remove_endpoint_fd(fd1);
        self.remove_endpoint_fd(fd2);
    }

    fn remove_endpoint_fd(&mut self, fd: libc::c_int) {
        self.epoll_remove_fd(fd);
        self.end_points_map.remove(&fd);
        self.fd_map.remove(&fd);
    }

    fn epoll_remove_fd(&mut self, fd: libc::c_int) {
        unsafe {
            let flags: u32 = (libc::EPOLLIN) as u32;
            let frontend_epoll_event = &mut libc::epoll_event {
                events: flags,
                u64: fd as u64,
            };

            libc::epoll_ctl(self.epoll_fd, libc::EPOLL_CTL_DEL, fd, frontend_epoll_event);
        }
    }

    fn epoll_add_fd(&self, fd: libc::c_int) {
        unsafe {
            let flags: u32 = (libc::EPOLLIN) as u32;
            let frontend_epoll_event = &mut libc::epoll_event {
                events: flags,
                u64: fd as u64,
            };

            libc::epoll_ctl(self.epoll_fd, libc::EPOLL_CTL_ADD, fd, frontend_epoll_event);
        }
    }

    fn add_connection(&mut self, frontend_fd: libc::c_int) {
        let backend = Backend::new("my-mysql-host:3306");
        println!(
            "Connection fe_fd:{} be_fd:{}",
            frontend_fd,
            backend.get_fd()
        );
        self.epoll_add_fd(frontend_fd);
        self.epoll_add_fd(backend.get_fd());
        let frontend = Frontend::new(frontend_fd);
        self.fd_map.insert(backend.get_fd(), frontend_fd);
        self.fd_map.insert(frontend_fd, backend.get_fd());
        self.end_points_map
            .insert(backend.get_fd(), Box::new(backend));
        self.end_points_map.insert(frontend_fd, Box::new(frontend));
    }

    fn handle_endpoints(&mut self) {
        let mut events: Vec&lt;libc::epoll_event> = Vec::with_capacity(200);
        events.clear();
        let res = unsafe {
            let res: i32 = libc::epoll_wait(
                self.epoll_fd,
                events.as_mut_ptr() as *mut libc::epoll_event,
                200,
                100,
            );
            res
        };

        if res >= 0 {
            unsafe {
                events.set_len(res as usize);
            }
            if events.len() > 0 {
                let mut do_cleanup = true;
                for event in events.iter() {
                    match self.fd_map.get(&(event.u64 as i32)) {
                        Some(write_to_fd) => {
                            let read_from_fd = event.u64 as i32;
                            let read_from_stream = match self.end_points_map.get_mut(&read_from_fd)
                            {
                                Some(read_from_stream) => read_from_stream,
                                None => {
                                    println!("1a. Cleanup");
                                    //Since we are cleaning up both endpoints, it might happen we might see evnt from this fd simply ignore!!! that and continue
                                    continue;
                                }
                            };
                            let mut buf: [u8; 1024] = [0; 1024];
                            match read_from_stream.read(&mut buf) {
                                Ok(read_bytes) if read_bytes > 0 => {
                                    let write_to_stream =
                                        self.end_points_map.get_mut(&write_to_fd).unwrap();

                                    match write_to_stream.write(&buf[..read_bytes]) {
                                        Ok(res) if res > 0 => {
                                            do_cleanup = false;
                                        }
                                        Ok(_) => {
                                            println!("3a. Cleanup");
                                        }
                                        Err(_err) => {
                                            println!("3b. Cleanup");
                                        }
                                    }
                                }
                                Ok(_) => {
                                    println!("2b. Cleanup");
                                }
                                Err(_err) => {
                                    println!("2b. Cleanup");
                                }
                            };

                            if do_cleanup {
                                self.cleanup_endpoint(*write_to_fd, read_from_fd);
                            }
                        }
                        None => {}
                    }
                }
            }
        }
    }

    fn start(&mut self) -> std::io::Result&lt;()> {
        println!("Starting Listener!!! on Port {}", self.port);
        unsafe {
            match libc::socket(libc::AF_INET, libc::SOCK_STREAM, 0) {
                fd if fd > 0 => {
                    let opt = 1;
                    match libc::setsockopt(
                        fd,
                        libc::SOL_SOCKET,
                        libc::SO_REUSEADDR | libc::SO_REUSEPORT,
                        &opt as *const _ as *const libc::c_void,
                        std::mem::size_of_val(&opt) as libc::socklen_t,
                    ) {
                        res if !(res &lt; 0) => {
                            println!("Socket created {:x}", fd);

                            let res = libc::fcntl(fd, libc::F_SETFL, libc::SOCK_NONBLOCK);
                            if res &lt; 0 {
                                println!("Set NON-BLOCKING failed {}", res);
                                libc::exit(res);
                            }

                            let port_lower = (self.port & 0xff) as i8;
                            let port_higher = ((self.port >> 8) & 0xff) as i8;

                            let mut socket_addr = libc::sockaddr {
                                sa_family: libc::AF_INET as u16,
                                sa_data: [
                                    port_higher,
                                    port_lower,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                ],
                            };

                            let mut addrlen: libc::socklen_t =
                                std::mem::size_of_val(&socket_addr) as libc::socklen_t;

                            match libc::bind(fd, &socket_addr, addrlen) {
                                res if !(res &lt; 0) => {
                                    println!("Binded!!!");
                                    match libc::listen(fd, 2000) {
                                        0 => {
                                            println!("Listening");
                                            let mut conn_count = 0;
                                            loop {
                                                match libc::accept(
                                                    fd,
                                                    &mut socket_addr,
                                                    &mut addrlen,
                                                ) {
                                                    frontend_fd if !(frontend_fd &lt; 0) => {
                                                        self.add_connection(frontend_fd);
                                                        conn_count += 1;
                                                        println!(
                                                            "Connection count - {}",
                                                            conn_count
                                                        );
                                                    }
                                                    _ => {}
                                                }
                                                self.handle_endpoints();
                                            }
                                        }
                                        res => {
                                            println!(
                                                "Listen error: {}, Error: {:?}",
                                                res,
                                                *libc::__errno_location()
                                            );
                                        }
                                    }
                                }
                                res => {
                                    println!(
                                        "Failed to bind: {}, Error: {:?}",
                                        res,
                                        *libc::__errno_location()
                                    );
                                }
                            }
                        }
                        res => {
                            println!("Set Socket options failed: {}", res);
                        }
                    }
                }
                res => {
                    println!("Create Socket failed: {}", res);
                }
            }
        }
        Ok(())
    }
}

fn main() -> std::io::Result&lt;()> {
    let mut tcp_proxy = TcpProxy::new(83306);
    println!("{:#?}", tcp_proxy);
    tcp_proxy.start()?;
    Ok(())
}
</pre>
