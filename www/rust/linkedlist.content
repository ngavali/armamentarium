<h2><a href="#rust"  >Rust Programming Language</a> - Pointers (linked list)</h2>
In this article, we shall explore pointers in rust by implementing a Linked List.</p>While we do so, I feel it would be in reader's best interest that they read through code thoroughly and try to play around with it! to have much better learning experience. I have added comments wherever necessary. Additionally, there is as an exercise left for the reader to explore more on this topic (read comments).</p>
<h4>Unsafe nodes!!!</h4>
<pre>
#[derive(Debug)]
struct Node {
    name: String,
    value: i32,
    next: Option&lt;*mut Node>, //Use Option to store NULL
}

impl Node {
    fn new(name: String, value: i32, next: Option&lt;*mut Node>) -> Node {
        Node { name, value, next }
    }
}

#[derive(Debug)]
struct LinkedList {
    head: Option&lt;*mut Node>,
}

impl LinkedList {
    fn new(head: Option&lt;*mut Node>) -> LinkedList {
        LinkedList { head }
    }

    fn add_value(&self, value: i32) {
        let mut a: Option&lt;*mut Node> = self.head;
        while let Some(node) = a {
            unsafe {
                (*node).value += value;
                a = (*node).next;
            }
        }
    }
}

fn main() {
    let n3 = &mut Node::new("Node3".to_string(), 3, None);
    let n2 = &mut Node::new("Node2".to_string(), 2, Some(n3));
    let n1 = &mut Node::new("Node1".to_string(), 1, Some(n2));

    let linked_list = LinkedList::new(Some(n1));

    let mut a: Option&lt;*mut Node> = linked_list.head;

    linked_list.add_value(1);

    while let Some(node) = a {
        unsafe {
            println!("=>\n -Node {:?}\n -My address {:?}\n", *node, node);
            a = (*node).next;
        }
    }

    println!("{:?}", linked_list);
}
</pre>
Output:
<pre>
=>
 -Node Node { name: "Node1", value: 2, next: Some(0x7ffecdb70318) }
 -My address 0x7ffecdb70370

=>
 -Node Node { name: "Node2", value: 3, next: Some(0x7ffecdb702c0) }
 -My address 0x7ffecdb70318

=>
 -Node Node { name: "Node3", value: 4, next: None }
 -My address 0x7ffecdb702c0

LinkedList { head: Some(0x7ffecdb70370) }
</pre>

<h4>Boxed</h4>
Let's put them safely into a Box.
<pre>
use std::boxed::Box;

#[derive(Debug, Clone)]
struct Node {
    name: String,
    value: i32,
    next: Option&lt;Box&lt;Node>>,
}

impl Node {
    fn new(name: String, value: i32, next: Option&lt;Box&lt;Node>>) -> Node {
        Node { name, value, next }
    }
}

#[derive(Debug, Clone)]
struct LinkedList {
    head: Option&lt;Box&lt;Node>>,
}

impl LinkedList {
    fn new(head: Option&lt;Box&lt;Node>>) -> LinkedList {
        LinkedList { head }
    }

    fn add_value(&mut self, value: i32) {
        let mut a = &mut self.head;
        while let Some(x) = a {
            x.value += value;
            a = &mut x.next;
        }
    }
}

fn main() {
    let n3 = Box::new(Node::new("Node3".to_string(), 3, None));
    let n2 = Box::new(Node::new("Node2".to_string(), 2, Some(n3)));
    let n1 = Box::new(Node::new("Node1".to_string(), 1, Some(n2)));

    let mut linked_list = LinkedList::new(Some(n1));

    println!(
        "Head address {:p}",
        linked_list.head.as_ref().unwrap().as_ref()
    );

    linked_list.add_value(1);
    let mut a: Option&lt;Box&lt;Node>> = linked_list.head;

    //Comment above 2 lines, uncomment below 2 lines to change the order and re-run the program
    //let mut a: Option&lt;Box&lt;Node>> = linked_list.head;
    //linked_list.add_value(1);

    while let Some(node) = a {
        println!(
            "=>\n -Node name={:?} value={:?}\n -My address {:p}\n",
            node.as_ref().name,
            node.as_ref().value,
            node
        );
        a = (*node).next;
    }

    //Try uncommenting next code line and re-run the program
    //println!("{:?}", linked_list);
}
</pre>

Output

<pre>
Head address 0x5606a89b41f0
=>
 -Node name="Node1" value=2
 -My address 0x5606a89b41f0

=>
 -Node name="Node2" value=3
 -My address 0x5606a89b41a0

=>
 -Node name="Node3" value=4
 -My address 0x5606a89b4150

</pre>

That's all folks!
