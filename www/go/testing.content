<h2><a href="#go" >Go Programming Language</a> - Testing</h2>
Go testing package
<pre>
go test
go test -v
go test -v -run specificTest
go test <i>test_file</i>.go [<i>dependent_file(s)</i>.go ...]
go test -v ./testing/ 	#run test in the given path
go test -v ./..		#test all packages in this module
go test -v -count=1	#avoid using cache
go clean -testcache [<i>Package path</i> ...]	#clean test cache or set <code>GOCACHE</code> environment variable to <code>off</code>
go test -cover #code coverage
</pre>
Create testdata directory which is ignored by <code>go run</code>/<code>build</code></p>
Colorize your go test result output</br>
<code>gotest</code> instead of <code>go test</code>
<pre>
go get -u github.com/rakyll/gotest
export GOTEST_PALETTE="red,cyan"
gotest -v
</pre>
Code coverage
<pre>
gotest -cover #test coverage
gotest -v -coverprofile=cover.txt
go tool cover -html=cover.txt -o cover.html
</pre>
Create test binary
<pre>
go test -c
./testing.test -test.v
</pre>
<h4>Misc</h4>
List go files in the given package
<pre>
go list -f={{.GoFiles}} net/http
List go test files in the given package
go list -f={{.TestGoFiles}} net/http
</pre>
Use race flag to detect any races in your code. [But pls note that it cannot capture races always.]
<pre>
go test -race
</pre>
Print stack trace of a running program. Press Ctrl+\ [Ctrl+Backslash] 

