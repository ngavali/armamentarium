<h2>
<a href="#go" >Go Programming Language</a> - 
<a href="#go/patterns"  > Design Patterns</a> - Observer</h2>
<draft/></p>
Code
<pre>
//
//	Observer pattern
//

package main

import "fmt"

type Subject interface {
        register(Observer)
        unregister(Observer)
        notify()
}

type subject struct {
        observers []Observer
        name      string
        value     int
}

func NewSubject(name string) *subject {
        return &subject{name: name}
}

func (s *subject) register(o Observer) {
        s.observers = append(s.observers, o)
}

func (s *subject) unregister(o Observer) {
        for k, v := range s.observers {
                if v == o {
                        s.observers = append(s.observers[:k], s.observers[k+1:]...)
                }
        }
}

func (s *subject) update() {
        s.value++
        s.notify()
}

func (s *subject) notify() {
        for _, v := range s.observers {
                v.update(s.value)
        }
}

type Observer interface {
        update(int)
}

type observer struct {
        name  string
        score subject
}

func NewObserver(name string) *observer {
        return &observer{name: name}
}

func (o *observer) update(score int) {
        o.score.value = score
        o.display()
}

func (o *observer) display() {
        fmt.Printf("%s : current score is : %d\n", o.name, o.score.value)
}

func main() {

        var CricketScore = NewSubject("CricketScore")

        var s1, s2, s3 = NewObserver("s1"), NewObserver("s2"), NewObserver("s3")

        CricketScore.register(s1)
        CricketScore.register(s2)
        CricketScore.register(s3)

        CricketScore.update()
        CricketScore.update()

        CricketScore.unregister(s2)

        CricketScore.update()

}
</pre>
Output
<pre>
s1 : current score is : 1
s2 : current score is : 1
s3 : current score is : 1
s1 : current score is : 2
s2 : current score is : 2
s3 : current score is : 2
s1 : current score is : 3
s3 : current score is : 3
</pre>

<!--Alternate version
<pre>
package main

import "fmt"

type Subject interface {
        register(Observer)
        unregister(Observer)
        notify()
}

type subject struct {
        observers []Observer
        name      string
        value     int
}

func NewSubject(name string) *subject {
        return &subject{name: name}
}

func (s *subject) register(o Observer) {
        s.observers = append(s.observers, o)
}

func (s *subject) unregister(o Observer) {
        for k, v := range s.observers {
                if v == o {
                        s.observers = append(s.observers[:k], s.observers[k+1:]...)
                }
        }
}

func (s *subject) update() {
        s.value++
        s.notify()
}

func (s *subject) notify() {
        for _, v := range s.observers {
                v.update(s.value)
        }
}

type Observer interface {
        update(int)
}

type observer struct {
        name  string
        score subject
}

func NewObserver(name string) *observer {
        return &observer{name: name}
}

func (o *observer) observe(s Subject) {
        s.register(o)
}

func (o *observer) unobserve(s Subject) {
        s.unregister(o)
}

func (o *observer) update(score int) {
        o.score.value = score
        o.display()
}

func (o *observer) display() {
        fmt.Printf("%s : current score is : %d\n", o.name, o.score.value)
}

func main() {

        var CricketScore = NewSubject("CricketScore")

        var s1, s2, s3 = NewObserver("s1"), NewObserver("s2"), NewObserver("s3")

        s1.observe(CricketScore)
        s2.observe(CricketScore)
        s3.observe(CricketScore)

        CricketScore.update()
        CricketScore.update()

        s3.unobserve(CricketScore)

        CricketScore.update()

}
</pre>
