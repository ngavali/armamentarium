<h3>
<a href="#go" >Go Programming Language</a> - 
<a href="#go/patterns"  > Design Patterns</a> - Strategy</h3>
<r><h5>Draft!</h5></r></p>
Think of a reverse proxy. It accepts client connection and forwards requests to backend server and responses from backend server back to the client.</br>
Let a proxy be represented by an object, say Wormhole. (Using some fancy terminology, A wormhole is a tunnel between two separate points in spacetime)</br>
And a backend server that client wants to reach, say Destination.</br>
In our proxy example here, wormhole receives the connection from a client and tunnels traffic to a backend server. Makes client feel that it's talking to the backend server.</br>
<h4>Proxy code</h4>
<pre>
package wormhole

import (
        "fmt"
        "io"
        "net"
        "sort"
        "sync"
        "time"

        "github.com/pkg/errors"
)

var wormholes map[string]wormhole

type wormhole struct {
        name            string
        port            uint
        beChan          chan destination
        algo            SelectionAlgo
        destinationList []destination
        checkCycle      int
}
</pre>
<h4>Backend selection strategy</h4>
Let us say we have a set of backend servers that we can connect a client to. </br>
Possibly, shortest path</br>
1. Thats is, backend with Least connection time </br>
Or say any backend</br>
2. In Round Robin </br>
Thus, we have two strategies to reach a backend or select a backend to connect a client. ( Various strategies can be used to select backend server, here we consider these two).</br>
<pre>
package wormhole

import (
        "github.com/pkg/errors"
)

const (
        CLOSEST int = iota
        ROUNDROBIN
)

var algoName = map[int]string{CLOSEST: "Closest", ROUNDROBIN: "Round Robin"}

type SelectionAlgo interface {
        Select([]destination, chan destination)
        Type() int
}

type algoClosest struct {
}

func (a *algoClosest) Type() int {
        return CLOSEST
}

func (a *algoClosest) Select(beList []destination, be chan destination) {
        for {
                for _, b := range beList {
                        if b.isAlive {
                                be <- b
                                break
                        }
                }
        }
}

type algoRoundRobin struct {
}

func (a *algoRoundRobin) Type() int {
        return ROUNDROBIN
}

func (a *algoRoundRobin) Select(beList []destination, be chan destination) {
        for {
                for _, b := range beList {
                        if b.isAlive {
                                be <- b
                        }
                }
        }
}

func NewSelectionAlgo(algoType int) SelectionAlgo {
        switch algoType {
        case CLOSEST:
                return new(algoClosest)
        case ROUNDROBIN:
                return new(algoRoundRobin)
        default:
                panic(errors.Errorf("Unsupported algorithm: %d", algoType))
        }
}
</pre>
