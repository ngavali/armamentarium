<h2><a href="#go" >Go Programming Language</a> - <a href="#go/poeaa">P of EAA</a> - Table Data Gateway</h2>
<draft/></p>
<img src="static/table-data-gateway.png" width="250px" />
./gateway/database/record_set.go
<pre>package database

type Record map[string]interface{}

type RecordSet struct {
    rows []Record
}

func (rs *RecordSet) First() Record {
    if len(rs.rows) > 0 {
        return rs.rows[0]
    }
    return nil
}

func (rs *RecordSet) All() []Record {
    return rs.rows
}</pre>
./gateway/person_gateway.go
<pre>package gateway

import (
    "POEAA/table-data-gateway/gateway/database"
)

type DbType int

const (
    MYSQL DbType = iota
    PGSQL
)

type (
    PersonGateway interface {
        Find(int64) database.RecordSet
        FindWithAgeOver(int64) database.RecordSet
        FindAll() database.RecordSet
        Insert(string, int64) int64
        Update(int64, string, int64) error
        SeedData() error
    }
)

func NewPersonGateway(dbtype DbType) PersonGateway {
    switch dbtype {
    case MYSQL:
        return database.NewMysqlPersonGateway()
    default:
        return nil
    }
}</pre>
./gateway/database/mysql_config.go
<pre>
package database

const (
    MYSQL_HOST   = "localhost"
    MYSQL_PORT   = 3306
    MYSQL_USER   = "root"
    MYSQL_PASS   = "mysecret"
    MYSQL_DATABASE = "alexandria"
)</pre>
./gateway/database/mysql_person_gateway.go
<pre>package database

import (
    "database/sql"
    "fmt"
    "log"

    _ "github.com/go-sql-driver/mysql"
)

const (
    MYSQL_DSN = "%s:%s@tcp(%s:%d)/%s"
)

func (m *MysqlPersonGateway) SeedData() error {
    m.deleteAll()
    m.Insert("Tushar", 38)
    m.Insert("Charu", 34)
    m.Insert("Dhruv", 7)
    return nil
}

type MysqlPersonGateway struct {
    conn *sql.DB
}

func NewMysqlPersonGateway() *MysqlPersonGateway {
    return &MysqlPersonGateway{}
}

func (m *MysqlPersonGateway) open() {
    if db, _err := sql.
        Open("mysql", fmt.Sprintf(
            MYSQL_DSN,
            MYSQL_USER,
            MYSQL_PASS,
            MYSQL_HOST,
            MYSQL_PORT,
            MYSQL_DATABASE)); _err != nil {
        log.Fatalln(_err)
    } else {
        if _err = db.Ping(); _err != nil {
            log.Fatalln(_err)
        } else {
            m.conn = db
        }
    }
}

func (m *MysqlPersonGateway) close() {
    m.conn.Close()
}

func (m *MysqlPersonGateway) Find(id int64) RecordSet {
    var recordSet RecordSet
    var record = make(Record)
    m.open()
    defer m.close()
    rows, _err := m.conn.
        Query("select id, name, age from Person where id = ? limit 1", id)

    if _err != nil {
        log.SetFlags(log.LstdFlags | log.Lshortfile)
        log.Fatalln(_err)
    }

    columns, _err := rows.Columns()

    rowValue := make([]interface{}, len(columns))
    scanInterface := make([]interface{}, len(columns))
    for i := range rowValue {
        scanInterface[i] = &rowValue[i]
    }

    for rows.Next() {
        _err = rows.Scan(scanInterface...)
        if _err != nil {
            log.SetFlags(log.LstdFlags | log.Lshortfile)
            log.Fatalln(_err)
        }

        for i, k := range columns {
            record[k] = rowValue[i]
        }

        recordSet.rows = append(recordSet.rows, record)
    }

    //recordSet.rows = make([]map[string]interface{}, 0)

    m.close()
    return recordSet
}

func (m *MysqlPersonGateway) FindAll() RecordSet {
    var recordSet RecordSet
    m.open()
    defer m.close()
    if stmt, _err := m.conn.Prepare("select id, name, age from Person"); _err != nil {
        log.Fatalln(_err)
    } else {
        if rows, _err := stmt.Query(); _err != nil {
            log.Fatalln(_err)
        } else {
            defer rows.Close()

            columns, _err := rows.Columns()
            for rows.Next() {

                rowValue := make([]interface{}, len(columns))
                scanInterface := make([]interface{}, len(columns))
                for i := range rowValue {
                    scanInterface[i] = &rowValue[i]
                }

                _err = rows.Scan(scanInterface...)

                if _err != nil {
                    log.SetFlags(log.LstdFlags | log.Lshortfile)
                    log.Fatalln(_err)
                }

                record := make(Record)
                for i, k := range columns {
                    record[k] = rowValue[i]
                }

                recordSet.rows = append(recordSet.rows, record)
            }
        }
    }
    m.close()
    return recordSet
}

func (m *MysqlPersonGateway) FindWithAgeOver(age int64) RecordSet {
    var recordSet RecordSet
    m.open()
    defer m.close()
    if stmt, _err := m.conn.
        Prepare("select id, name, age from Person where age > ?"); _err != nil {
        log.Fatalln(_err)
    } else {
        if rows, _err := stmt.
            Query(age); _err != nil {
            log.Fatalln(_err)
        } else {
            defer rows.Close()

            columns, _err := rows.Columns()
            for rows.Next() {

                rowValue := make([]interface{}, len(columns))
                scanInterface := make([]interface{}, len(columns))
                for i := range rowValue {
                    scanInterface[i] = &rowValue[i]
                }

                _err = rows.Scan(scanInterface...)

                if _err != nil {
                    log.SetFlags(log.LstdFlags | log.Lshortfile)
                    log.Fatalln(_err)
                }

                record := make(Record)
                for i, k := range columns {
                    record[k] = rowValue[i]
                }

                recordSet.rows = append(recordSet.rows, record)
            }

        }
    }
    m.close()
    return recordSet
}

func (m *MysqlPersonGateway) Insert(name string, age int64) (id int64) {
    m.open()
    defer m.close()
    res, _err := m.conn.
        Exec(`insert into Person 
            (name, age) values (?, ?)`,
            name,
            age)
    if _err != nil {
        log.Fatalln(_err)
    }
    id, _err = res.LastInsertId()
    if _err != nil {
        log.Fatalln(_err)
    }
    //fmt.Printf("Inserted LastInsert:%d", id)
    return
}

func (m *MysqlPersonGateway) Update(id int64, name string, age int64) error {
    m.open()
    defer m.close()
    res, _err := m.conn.
        Exec(`update Person 
                set name = ?, 
                age = ? 
                where id = ?`,
            name,
            age,
            id)
    if _err != nil {
        return _err
    }
    _, _err = res.RowsAffected()
    if _err != nil {
        return _err
    }
    //fmt.Printf("Updated : %d", ra)
    return nil
}

func (m *MysqlPersonGateway) deleteAll() error {
    m.open()
    defer m.close()
    _, _err := m.conn.
        Exec(`create or replace table Person ( 
        id serial primary key, 
        name varchar(200) not null, 
        age int not null )`)
    if _err != nil {
        return _err
    }
    m.close()
    return nil
}</pre>
