<h3><a href="#go" >Go Programming Language</a> - <a href="#go/poeaa">P of EAA</a> - Data Mappers</h3>
<i><r>Work in progress</r></i></p>
In this article, I have tried to implement Data Mapper (from the book by Eric Evans - Patterns of Enterprise Application Archtecture) using Golang. The example uses a Person object that has an unique <b>id</b> to identifies itself, and a <b>name</b> and <b>age</b> fields for the demonstration. And we perform basic CRUD operations on same.
(Pardon me for the naming convention used in this example, I am not good at it). I hope you will find this article useful in understanding datamappers.</p>
Let jump straight into it. Code is organized as follows:
<img src="static/data-mapper.png" width="250px" />
<h4>Entities</h4>
entity/person.go
<pre>
package entity

type Person struct {
  id   int64
  name string
  age  int
}

func NewPerson(id int64, name string, age int) *Person {
  return &Person{id, name, age}
}

//I have put it here
func (p *Person) Fields() []interface{} {
  return []interface{}{&p.id, &p.name, &p.age}
}

func (p Person) Id() int64 {
  return p.id
}

func (p Person) Name() string {
  return p.name
}

func (p *Person) SetAge(age int) {
  p.age = age
}

func (p Person) Age() int {
  return p.age
}
</pre>
<h4>Persistence Layer</h4>
Query, it is used to store SQL statement text and extend them with minimal helper functions.</br>
persistence/database/query.go
<pre>
package database

import (
  "strings"

  _ "github.com/go-sql-driver/mysql"
)

type Query interface {
  String() string
  Where(string) Query
}

func NewQuery(sql string) Query {
  return &query{sql}
}

type query struct {
  sql string
}

func (q *query) Where(cond string) Query {
  q.sql = strings.Join([]string{
    q.sql,
    cond,
  }, " ")
  return q
}

func (q *query) String() string {
  return string(q.sql)
}
</pre>
Database config file</br>
persistence/database/mysqlConfig.go
<pre>
package database

const (
  MYSQL_HOST     = "localhost"
  MYSQL_PORT     = 3306
  MYSQL_USER     = "root"
  MYSQL_PASS     = "mysecret"
  MYSQL_DATABASE = "alexandria"
)
</pre>
Database interface exposing only required functionality</br>
persistence/database/database.go
<pre>
package database

import "database/sql"

type DbType int

const (
  MYSQL DbType = iota
  PGSQL
)

type (

  ScanFn func() //bear with me on this

  Database interface {
    Connect() error
    QuerySingle(string, ...interface{}) *sql.Row
    QueryMany(string, ...interface{}) (*sql.Rows, error)
    ScanMany(*sql.Rows, ScanFn)
    ExecSingle(string, ...interface{}) (sql.Result, error)
    Close()
  }
)

func NewDatabase(dbtype DbType) Database {
  switch dbtype {
  case MYSQL:
    return &MySQLDatabase{}
  default:
    return nil
  }
}
</pre>
Something specific to Mysql</br>
persistence/database/mysql.go
<pre>
package database

import (
  "database/sql"
  "fmt"
  "log"

  _ "github.com/go-sql-driver/mysql"
)

const (
  MYSQL_DSN = "%s:%s@tcp(%s:%d)/%s"
)

type MySQLDatabase struct {
  conn *sql.DB
}

func NewMySQLDatabase() *MySQLDatabase {
  return &MySQLDatabase{}
}

func (m *MySQLDatabase) Connect() error {
  if db, _err := sql.
    Open("mysql", fmt.Sprintf(
      MYSQL_DSN,
      MYSQL_USER,
      MYSQL_PASS,
      MYSQL_HOST,
      MYSQL_PORT,
      MYSQL_DATABASE)); _err != nil {
    return _err
  } else {
    m.conn = db
  }
  return nil
}

func (m *MySQLDatabase) Close() {
  m.conn.Close()
}

func (m *MySQLDatabase) QueryMany(query string, args ...interface{}) (*sql.Rows, error) {
  return m.conn.Query(query, args...)
}

func (m *MySQLDatabase) QuerySingle(query string, args ...interface{}) *sql.Row {
  return m.conn.QueryRow(query, args...)
}

<r>//I hope you must have got an idea by now!</r>
func (m *MySQLDatabase) ScanMany(rows *sql.Rows, scanFn ScanFn) {
  for rows.Next() {
    scanFn()
  }
}

func (m *MySQLDatabase) ExecSingle(query string, args ...interface{}) (sql.Result, error) {

  if stmt, _err := m.conn.
    Prepare(query); _err != nil {
    log.Fatalln(_err)
    return nil, _err
  } else {
    return stmt.Exec(args...)
  }
}
</pre>
<h4>Data mapper</h4> Interface</br>
mapper/personMapper.go
<pre>
package mapper

import (
  "data-mapper/entity"

  _ "github.com/go-sql-driver/mysql"
)

type MapperType int

const (
  MEMORY MapperType = iota
  MYSQL
  PGSQL
)

//PersonMapper interface
type PersonMapper interface {
  GetAllPerson() []entity.Person
  FindById(int64) entity.Person
  Save(entity.Person)
  SaveAll([]entity.Person)
  Create(string, int) entity.Person
  Remove(entity.Person)
}

func NewPersonMapper(mt MapperType) PersonMapper {
  switch mt {
  case MEMORY:
    return NewMemoryPersonMapper()
  case MYSQL:
    return NewMySQLPersonMapper()
  default:
    return nil
  }
}
</pre>
Just for the sake of quick testing, nothing special</br>
mapper/personMemory.go
<pre>
package mapper

import (
  "data-mapper/entity"
  "fmt"
  "math/rand"
)

/*Default data set*/
var personCollection = []entity.Person{
  *entity.NewPerson(1, "Tushar", 38),
  *entity.NewPerson(2, "Charusheela", 34),
  *entity.NewPerson(3, "Dhruv", 7),
  *entity.NewPerson(4, "Ira", 2),
}

/*Seed Custom data*/
func SeedData(pc []entity.Person) {
  personCollection = pc
}

//Concrete PersonMapper
type MemoryPersonMapper struct {
}

func NewMemoryPersonMapper() *MemoryPersonMapper {
  return &MemoryPersonMapper{}
}

func (p MemoryPersonMapper) Columns() string {
  return "id, name, age"
}

func (p MemoryPersonMapper) Fields(person *entity.Person) []interface{} {
  return person.Fields()
}

func (p MemoryPersonMapper) Create(name string, age int) entity.Person {
  return *entity.NewPerson(
    rand.Int63n(10000000),      <c>//Just some random, number no sequence</c>
    name,
    age)
}

func (p MemoryPersonMapper) GetAllPerson() []entity.Person {
  return personCollection
}

func (p MemoryPersonMapper) FindById(id int64) entity.Person {
  var person entity.Person
  for _, p := range p.GetAllPerson() {
    if p.Id() == id {
      person = p
      break
    }
  }
  return person
}

func (p MemoryPersonMapper) Save(person entity.Person) {
  fmt.Println("Saved")
  for k, v := range personCollection {
    if v.Id() == person.Id() {
      personCollection[k] = person
      break
    }
  }
}

func (p MemoryPersonMapper) SaveAll(persons []entity.Person) {
  personCollection = persons
}

func (p MemoryPersonMapper) Remove(person entity.Person) {

  fmt.Println("Deleted")
  for k, v := range personCollection {
    if v.Id() == person.Id() {
      personCollection = append(
        personCollection[:k],
        personCollection[k+1:]...)
      break
    }
  }
}
</pre>
Some real database mapper</br>
mapper/personMysql.go
<pre>
package mapper

import (
  "data-mapper/entity"
  "data-mapper/persistence/database"
  "fmt"
  "log"
  "strings"

  _ "github.com/go-sql-driver/mysql"
)

/*Seed Custom data*/
func MySQLSeedData(pc []entity.Person) {

    mm := NewMySQLPersonMapper()
    mm.Truncate()

    if persons != nil {
        personCollection = pc
    }

    for _, person := range personCollection {
        mm.Create(person.Name(), person.Age())
    }
}

//Concrete PersonMapper
type MySQLPersonMapper struct {
  database.Database
}

func NewMySQLPersonMapper() *MySQLPersonMapper {
  mysqlDB := database.NewMySQLDatabase()
  return &MySQLPersonMapper{mysqlDB}
}

func (p MySQLPersonMapper) Columns() []string {
  return []string{"name", "age"}
}

func (p MySQLPersonMapper) Fields(person *entity.Person) []interface{} {
  return person.Fields()
}

func (p MySQLPersonMapper) InsertQuery() database.Query {
  valueFields := func() (setFields []string) {
    for _ = range p.Columns() {
      setFields = append(setFields, "?")
    }
    return
  }()
  return database.NewQuery("insert into Person (" +
    strings.Join(p.Columns(), ",") +
    ") values (" +
    strings.Join(valueFields, ",") + ")")
}

func (p MySQLPersonMapper) SelectQuery() database.Query {
  return database.NewQuery("select id, " +
    strings.Join(p.Columns(), ",") +
    " from Person")
}

func (p MySQLPersonMapper) UpdateQuery() database.Query {

  setFields := func() (setFields []string) {
    for _, v := range p.Columns() {
      setFields = append(setFields, v+"=?")
    }
    return
  }()
  return database.NewQuery("update Person set " +
    strings.Join(setFields, ","))
}

func (p MySQLPersonMapper) DeleteQuery() database.Query {
  return database.NewQuery("delete from Person")
}

func (p MySQLPersonMapper) TruncateQuery() database.Query {
  return database.NewQuery("truncate table Person")
}

func (p MySQLPersonMapper) Create(name string, age int) (person entity.Person) {

  if _err := p.Database.Connect(); _err != nil {
    log.Fatalln(_err)
  } else {
    defer p.Database.Close()

    if res, _err := p.Database.
      ExecSingle(p.
        InsertQuery().String(),
        name,
        age); _err != nil {
      log.Fatalln(_err)
    } else {
      fmt.Printf("Created: %+v\n", res)
      if id, _err := res.LastInsertId(); _err != nil {
        log.Fatalln(_err)
      } else {
        person = *entity.NewPerson(id, name, age)
      }
    }
  }

  return
}

func (p MySQLPersonMapper) GetAllPerson() (persons []entity.Person) {

  //persons = make([]entity.Person, 0)
  if _err := p.Database.Connect(); _err != nil {
    log.Fatalln(_err)
  } else {
    defer p.Database.Close()

    if rows, _err := p.Database.
      QueryMany(p.
        SelectQuery().String()); _err != nil {
      log.Fatalln(_err)
    } else {
      defer rows.Close()

      for rows.Next() {
        var person entity.Person
        rows.Scan(p.
          Fields(&person)...)
        persons = append(persons, person)

      }

      <r>//You got it here! and i will leave it upto you to explore</r>
      /*p.Database.ScanMany(rows, func() {
        var person entity.Person
        rows.Scan(p.Fields(&person)...)
        persons = append(persons, person)
      })*/
    }
  }
  return
}

func (p MySQLPersonMapper) FindById(id int64) (person entity.Person) {

  if _err := p.Database.Connect(); _err != nil {
    log.Fatalln(_err)
  } else {
    defer p.Database.Close()

    if _err := p.Database.
      QuerySingle(p.
        SelectQuery().
        Where("where id = ?").String(),
        id).
      Scan(p.
        Fields(&person)...); _err != nil {
      log.Fatalln(_err)
    }
  }
  return
}

func (p MySQLPersonMapper) Update(person entity.Person) {
  if _, _err := p.Database.
    ExecSingle(p.
      UpdateQuery().
      Where("where id = ?").String(),
      person.Name(),
      person.Age(),
      person.Id()); _err != nil {
    log.Fatalln(_err)
  } else {
    fmt.Println("Saved")
  }
}

func (p MySQLPersonMapper) Save(person entity.Person) {

  if _err := p.Database.Connect(); _err != nil {
    log.Fatalln(_err)
  } else {
    defer p.Database.Close()

    p.Update(person)
  }
}

func (p MySQLPersonMapper) SaveAll(persons []entity.Person) {

  if _err := p.Database.Connect(); _err != nil {
    log.Fatalln(_err)
  } else {
    defer p.Database.Close()

    for _, person := range persons {
      p.Update(person)
    }
  }
}

func (p MySQLPersonMapper) Remove(person entity.Person) {

  if _err := p.Database.Connect(); _err != nil {
    log.Fatalln(_err)
  } else {
    defer p.Database.Close()

    if _, _err := p.Database.
      ExecSingle(p.
        DeleteQuery().
        Where("where id = ?").String(),
        person.Id()); _err != nil {
      log.Fatalln(_err)
    } else {
      fmt.Println("deleted")
    }
  }
}

func (p MySQLPersonMapper) Truncate() {
  if _err := p.Database.Connect(); _err != nil {
    log.Fatalln(_err)
  } else {
    defer p.Database.Close()

    if _, _err := p.Database.
      ExecSingle(p.
        TruncateQuery().String()); _err != nil {
      log.Fatalln(_err)
    } else {
      fmt.Println("truncated")
    }
  }
}
</pre>
That's all folks</p>
Hope you have enjoyed it!!!
